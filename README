=============================================================================
  Overview
=============================================================================

This package originally accompanied the paper "The impact of RPython on VM
design and implementation" by Carl Friedrich Bolz and Laurence Tratt. It
automates the building and running of the experimental results therein, so
that others can reproduce the results and study them. The experiments have
since been extended beyond those in the original paper by various authors.

We have attempted to make this as automated as possible on Unix machines. We
recommend that the machine you run this on has at least 6Gb RAM (preferably
8Gb). You may need to install some background software, although the build
process does its best to detect this when started. The only piece of software
we can not easily automate the download of is Java: you will need to provide
your own Java VM (including javac) and put it into your $PATH.

In general you can simply execute make:

  $ make

This will build the necessary software (which takes approximately 1-2 hours)
and then run the experiments. These default to 30 repetitions of each
benchmark, for a rough running time of 3-7 days. If you want a shorter run,
you can edit the REPS parameter at the top of run_benchmarks.sh (minimum
value is 1). When complete, you will see the raw output from multitime in the
"results" file; if you have Python installed, a pretty-printed HTML version
of the results can be found in results.html.


=============================================================================
  LoC
=============================================================================

We have also automated the Lines of Code (LoC) count for VMs so that you can
see precisely what we have included and excluded. In general you can simply
execute:

  $ ./loc.sh

If "build.sh" has not previously been run, "build.sh" will automatically be
executed to download all the VMs.

=============================================================================
  Licensing
=============================================================================

All original files are under the following MIT license:

  Copyright (c)2012 Carl Friedrich Bolz and Laurence Tratt

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

Files from the Computer Language Benchmarks Game are under a revised BSD
license:

  http://shootout.alioth.debian.org/license.php

The Richards benchmark is in the public domain (Martin Richards confirmed
"everything in my bench distribution is in the public domain except for the
directory sunjava.").

The LUA Richards benchmark is in the public domain:

  http://www.dcc.ufrj.br/~fabiom/richards_lua.zip

The Java Richards benchmark license is at:
  http://web.archive.org/web/20050825101121/http://www.sunlabs.com/people/mario/java_benchmarking/index.html
  (see also http://www.wolczko.com/java_benchmarking.html)
  
